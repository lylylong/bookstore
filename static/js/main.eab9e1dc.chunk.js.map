{"version":3,"sources":["app/store.js","components/Navbar.js","components/Book.js","components/BookList.js","App.js","serviceWorker.js","index.js"],"names":["initialState","data","store","createStore","state","action","type","book","books","AppNavbar","Navbar","bg","variant","className","Brand","href","Book","props","useState","show","setShow","handleClose","setBook","useSelector","dispatch","useDispatch","Row","Button","onClick","size","splice","index","removeBookAction","Modal","onHide","Header","closeButton","Title","Body","Form","inline","Control","onChange","e","target","value","placeholder","Footer","BookList","slice","Container","map","addBookAction","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eab9e1dc.chunk.js","sourcesContent":["import { createStore } from \"redux\";\r\n\r\nconst initialState = {\r\n  data: [\"Harry Potter (example)\", \"one\", \"two\", \"three\"],\r\n};\r\n\r\nfunction books(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"ADD_BOOK\":\r\n      return {\r\n        ...state,\r\n        data: [...state.data, action.book],\r\n      };\r\n    case \"REMOVE_BOOK\":\r\n      return {\r\n        ...state,\r\n        data: action.books,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst store = createStore(books);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport { Navbar } from \"react-bootstrap\";\n\nconst AppNavbar = () => {\n  return (\n    <>\n      <Navbar\n        bg=\"dark\"\n        variant=\"dark\"\n        className=\"App-header justify-content-center\"\n      >\n        <Navbar.Brand href=\"/\">Book Store</Navbar.Brand>\n      </Navbar>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, Form, Modal, Row } from \"react-bootstrap\";\nconst removeBookAction = (books) => {\n  return { type: \"REMOVE_BOOK\", books };\n};\nconst Book = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const [book, setBook] = useState(props.book);\n\n  let books = useSelector((state) => state.data);\n  const dispatch = useDispatch();\n  const bookOnChange = (e) => {\n    setBook(e.target.value);\n  };\n  const removeBook = () => {\n    books.splice(props.index, 1);\n    dispatch(removeBookAction(books));\n  };\n\n  return (\n    <>\n      <Row className=\"justify-content-center mt-3\">\n        <span key={book}>{book}</span>\n        <Button\n          variant=\"warning\"\n          onClick={handleShow}\n          className=\"ml-2\"\n          size=\"sm\"\n        >\n          Update\n        </Button>\n        <Button\n          variant=\"danger\"\n          onClick={removeBook}\n          className=\"ml-2\"\n          size=\"sm\"\n        >\n          Remove\n        </Button>\n      </Row>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Set A New Name</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form inline className=\"justify-content-center mt-4\">\n            <Form.Control\n              type=\"text\"\n              onChange={bookOnChange}\n              value={book}\n              placeholder={props.book}\n            />\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save and Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\nexport default Book;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Book from \"./Book\";\nimport { Container, Button, Form, Modal, Row } from \"react-bootstrap\";\nconst addBookAction = (book) => {\n  return { type: \"ADD_BOOK\", book };\n};\nconst BookList = () => {\n  // set modal display state\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  let books = useSelector((state) => state.data.slice(0));\n  const [book, setBook] = useState(\"\");\n  const dispatch = useDispatch();\n  const addBook = () => {\n    dispatch(addBookAction(book));\n    setBook(\"\");\n    setShow(false);\n  };\n  const bookOnChange = (e) => {\n    setBook(e.target.value);\n  };\n  return (\n    <Container className=\"flex\">\n      <Row className=\"justify-content-center mt-4\">\n        <Button variant=\"primary\" onClick={handleShow}>\n          Add A Book\n        </Button>\n      </Row>\n\n      <div className=\"mt-4\">\n        {books.map((book, index) => (\n          <Book key={book} book={book} index={index} />\n        ))}\n      </div>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal heading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form inline className=\"justify-content-center mt-4\">\n            <Form.Control\n              type=\"text\"\n              onChange={bookOnChange}\n              value={book}\n              placeholder=\"Book Name\"\n            />\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" type=\"button\" onClick={addBook}>\n            Save Book\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </Container>\n  );\n};\nexport default BookList;\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./app/store\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport BookList from \"./components/BookList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Navbar />\r\n      <BookList />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}